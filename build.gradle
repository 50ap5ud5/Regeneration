import org.gradle.internal.logging.text.StyledTextOutput //technically an internal api, but I don't really care
import org.gradle.internal.logging.text.StyledTextOutputFactory
import static org.gradle.internal.logging.text.StyledTextOutput.Style

buildscript {
	repositories {
		jcenter()
		maven { url = 'http://files.minecraftforge.net/maven' }
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	}
}
apply plugin: 'net.minecraftforge.gradle.forge'

version = project.mod_version
group = project.maven_group
archivesBaseName = "${project.jar_name}-${minecraft_version}"

sourceCompatibility = targetCompatibility = 1.8

minecraft {
	version = "${project.minecraft_version}-${project.forge_version}"
	mappings = project.mappings_version
	makeObfSourceJar = true
	
	if(project.hasProperty('runDir'))
		runDir = project.runDir
	else if(file('../run').exists())
		runDir = '../run'
	else
		runDir = 'run'
}

repositories {
	maven {
		name = "IC2"
		url = "http://maven.ic2.player.to"
	}

	maven {
		name = "CurseForge"
		url = "https://minecraft.curseforge.com/api/maven"
	}

	maven {
		name = "JitPack"
		url = "https://jitpack.io"
	}
	maven {
		name = "Progwml6 maven"
		url = "http://dvs1.progwml6.com/files/maven"
	}
}

dependencies {
	testCompile 'junit:junit:4.12'
	testCompile 'org.objenesis:objenesis:3.0.1'
	testCompile 'org.mockito:mockito-core:2.23.4'

	//Tardis mod stuff

	//ic2-ex
	compileOnly "net.industrial-craft:industrialcraft-2:2.8.98-ex112:api"
	//runtime "net.industrial-craft:industrialcraft-2:2.8.98-ex112"

	//JEI
	compileOnly "mezz.jei:jei_1.12.2:4.11.0.212:api"
	runtime "mezz.jei:jei_1.12.2:4.11.0.212"

	deobfCompile 'com.github.Spectre0987:TardisMod:0.0.8-dev'

}

test { //TODO works?
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}
}

processResources {
	inputs.property 'version', project.version
	inputs.property 'mcversion', project.minecraft.version
	
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}
	
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

task checkUpdateJson doLast {
	def out = services.get(StyledTextOutputFactory).create('version-check')
	def json = new groovy.json.JsonSlurper().parseText(new File('update.json').text)
	def thisMcVersionsVersions = json[minecraft_version]
	
	if (thisMcVersionsVersions == null) {
		out.withStyle(Style.Failure).println("WARNING: The current mc version '${minecraft_version}' does not exist in update.json")
	}
	
	if (thisMcVersionsVersions[version] == null) {
		out.withStyle(Style.Failure).println("WARNING: The current version '${version}' does not have a corresponding entry in update.json for mc version '${minecraft_version}'")
	} else {
		for (String version : json.promos) {
			def mcVersion = version.split('=')[0].split('-')[0]
			def value = version.split('=')[1]
			
			if (json[mcVersion][value] == null) {
				out.withStyle(Style.FailureHeader).println("WARNING: Promo version '${mcVersion}-${value}' does not exist!")
			}
		}
	}
	
	if (json.promos[minecraft_version+'-recommended'] == version) {
		out.withStyle(Style.Info).println("Building version ${minecraft_version}-recommended")
	} else if (json.promos[minecraft_version+'-latest'] == version) {
		out.withStyle(Style.Info).println("Building version ${minecraft_version}-latest")
	} else {
		out.withStyle(Style.FailureHeader).println("WARNING: Version '${minecraft_version}-${version}' is neither a latest nor a recommended version")
	}
}
project.tasks.test.dependsOn(checkUpdateJson)



sourceSets.main {
	java {
		srcDirs = ['src/main/java', 'src/debugger/java']
	}
	
	resources {
		srcDirs = ['src/main/resources', 'src/debugger/resources']
	}
}
