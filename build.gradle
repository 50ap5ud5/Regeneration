import org.gradle.internal.logging.text.StyledTextOutput; //technically an internal api, but I don't really care
import org.gradle.internal.logging.text.StyledTextOutputFactory;
import static org.gradle.internal.logging.text.StyledTextOutput.Style;

buildscript {
	repositories {
		jcenter()
		maven { url = 'http://files.minecraftforge.net/maven' }
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	}
}
apply plugin: 'net.minecraftforge.gradle.forge'

version = project.mod_version
group = project.maven_group
archivesBaseName = "${project.jar_name}-${minecraft_version}"

sourceCompatibility = targetCompatibility = 1.8

minecraft {
	version = "${project.minecraft_version}-${project.forge_version}"
	mappings = project.mappings_version
	makeObfSourceJar = true
	
	if(project.hasProperty('runDir'))
		runDir = project.runDir
	else if(file('../run').exists())
		runDir = '../run'
	else
		runDir = 'run'
}

repositories {}
dependencies {}

processResources {
	inputs.property 'version', project.version
	inputs.property 'mcversion', project.minecraft.version
	
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}
	
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

task checkUpdateJson doLast {
	def out = services.get(StyledTextOutputFactory).create('version-check');
	def json = new groovy.json.JsonSlurper().parseText(new File('update.json').text);
	def thisMcVersionsVersions = json[minecraft_version];
	
	if (thisMcVersionsVersions == null) {
		out.withStyle(Style.Failure).println("WARNING: The current mc version '${minecraft_version}' does not exist in update.json");
	}
	
	if (thisMcVersionsVersions[version] == null) {
		out.withStyle(Style.Failure).println("WARNING: The current version '${version}' does not have a corresponding entry in update.json for mc version '${minecraft_version}'");
	} else {
		for (String version : json.promos) {
			def mcVersion = version.split('=')[0].split('-')[0];
			def value = version.split('=')[1];
			
			if (json[mcVersion][value] == null) {
				out.withStyle(Style.FailureHeader).println("WARNING: Promo version '${key}' (${value}) does not exist!");
			}
		}
	}
	
	if (json.promos[minecraft_version+'-recommended'] == version) {
		out.withStyle(Style.Info).println("Building version ${minecraft_version}-recommended");
	} else if (json.promos[minecraft_version+'-latest'] == version) {
		out.withStyle(Style.Info).println("Building version ${minecraft_version}-latest");
	} else {
		out.withStyle(Style.FailureHeader).println("WARNING: Version '${minecraft_version}-${version}' is neither a latest nor a recommended version");
	}
}
project.tasks.test.dependsOn(checkUpdateJson)



sourceSets {
	debugger {
		java {
			srcDir 'src/debugger/java'
		}
		resources {
			srcDir 'src/debugger/resources'
		}
	}
}

task debuggerJar(type: Jar, dependsOn: classes) {
	classifier = 'debugger'
	from sourceSets.debugger.allSource
}

artifacts {
	archives debuggerJar
}
